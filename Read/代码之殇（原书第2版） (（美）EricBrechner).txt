- Your Highlight on Location 633-634 | Added on Monday, May 12, 2014 11:50:13 PM

最后，分享一句译完本书的个人感悟：你的理想不用很具体，只要你有那份热忱，即使你看不清未来是什么，你也会像我一样，向最初我的景仰人物侯捷先生迈进一步。
==========
- Your Highlight on Location 709-724 | Added on Tuesday, May 13, 2014 12:01:23 AM

目前，微软的产品开发分成七大业务部门，各个部门相应负责我们的主营产品——Windows、Office、Windows Phone、Interactive Entertainment（包括Xbox）、服务器软件及工具（包括Win-dows Server和Visual Studio）、Dynamics以及在线服务软件（包括Bing与MSN）。 每个部门大约包含20个独立的产品单元或管理小组。通常情况下，这些产品单元共享源代码控制、创建、安装、工作条目跟踪和项目协调（包括价值主张、里程碑安排、发布管理和持续性工程[1]）。除了这些相应的服务之外，产品单元或小组还有高度的自主权，可以对产品、流程和人员做出自己的安排。 一个典型的管理小组通常由三个专职经理组成：项目组项目经理（Group Program Manager, GPM）、开发经理（Development Manager）和测试经理（Test Manager）。一个产品开发单元通过这三个专职经理向产品单元经理（Product Unit Manager, PUM）负责。如果没有产品单元经理，那么他们分别向他们的上司并最终向部门主管汇报。其他工程领域，比如用户体验、内容发布（比如在线帮助）、创建和实施，这些可能单独对某个产品单元负责，也可能在整个部门中共享。 每个工程领域抽出一个或多个代表组成一个虚拟团队，由该团队向这三个专职经理负责并为一个单独的功能模块工作，该团队称为功能团队（feature team）。有些功能团队选择敏捷方法，有些喜欢精益模型，有些采用传统的软件工程模型，有些则根据实际情况综合采用上述多种方法。 微软如何整合所有这些多样化又独立自治的团队并使其朝向一个共同的目标有效地工作呢？这就是部门公共项目协调组所要扮演的角色了。例如，部门的价值主张是为所有的专职管理小组和他们的功能团队设置统一的关键示例、质量尺度和准则。
==========
- Your Highlight on Location 709-724 | Added on Tuesday, May 13, 2014 12:05:14 AM

目前，微软的产品开发分成七大业务部门，各个部门相应负责我们的主营产品——Windows、Office、Windows Phone、Interactive Entertainment（包括Xbox）、服务器软件及工具（包括Win-dows Server和Visual Studio）、Dynamics以及在线服务软件（包括Bing与MSN）。 每个部门大约包含20个独立的产品单元或管理小组。通常情况下，这些产品单元共享源代码控制、创建、安装、工作条目跟踪和项目协调（包括价值主张、里程碑安排、发布管理和持续性工程[1]）。除了这些相应的服务之外，产品单元或小组还有高度的自主权，可以对产品、流程和人员做出自己的安排。 一个典型的管理小组通常由三个专职经理组成：项目组项目经理（Group Program Manager, GPM）、开发经理（Development Manager）和测试经理（Test Manager）。一个产品开发单元通过这三个专职经理向产品单元经理（Product Unit Manager, PUM）负责。如果没有产品单元经理，那么他们分别向他们的上司并最终向部门主管汇报。其他工程领域，比如用户体验、内容发布（比如在线帮助）、创建和实施，这些可能单独对某个产品单元负责，也可能在整个部门中共享。 每个工程领域抽出一个或多个代表组成一个虚拟团队，由该团队向这三个专职经理负责并为一个单独的功能模块工作，该团队称为功能团队（feature team）。有些功能团队选择敏捷方法，有些喜欢精益模型，有些采用传统的软件工程模型，有些则根据实际情况综合采用上述多种方法。 微软如何整合所有这些多样化又独立自治的团队并使其朝向一个共同的目标有效地工作呢？这就是部门公共项目协调组所要扮演的角色了。例如，部门的价值主张是为所有的专职管理小组和他们的功能团队设置统一的关键示例、质量尺度和准则。
==========
- Your Highlight on Location 746-752 | Added on Tuesday, May 13, 2014 12:07:00 AM

将软件以建筑作为比喻实际上可以给予其很好的解释。基于程序代码在系统中所处的层次，它们可以被比作“基础、框架和装饰”。“基础”代码具有高度的杠杆作用，它们的改动常常会引起严重的连锁反应。“装饰”代码比较容易改动，而且也需要经常被改动。问题是，累积了几年的改变之后，复杂的程序就跟经历了几次装修的房子差不多——电源插座躲到了橱柜的后面，浴室风扇的出风口通向厨房。再做任何改变的话，其副作用或最终的代价都是很难预知的。 第二个基本问题是，软件行业还太年轻，实际上还未提出或建立关于可复用组件的正确标准。
==========
- Your Highlight on Location 757-760 | Added on Tuesday, May 13, 2014 12:10:31 AM

表面上看来，这些都是很简单的问题：建立一些标准，然后强制执行它们。在快速进步的大容量、高价值和低成本的软件世界里，这样做可是一个让你的业务落败的捷径。实际情况是，软件最大的工程障碍，同时也是它最大的优势是无处不在的软件（运行在低成本的个人电脑和互联网上）已经使其以惊人的步伐进行创新成为可能。
==========
- Your Highlight on Location 787-792 | Added on Tuesday, May 13, 2014 12:22:46 AM

不得不提的是，通过我在微软这些年工作期间的观察，在不同的规模、不同的抽象层次中，项目管理有不同的表现形式。这些层次包括：一个团队或功能层次（大概10人左右）、项目层次（50～5000人为一个特定版本工作）以及产品层次（由高级主管领导的多个版本开发）。敏捷开发在团队层次很适用，传统方法在项目层次中很适用，而长期的战略性规划方法在产品层次很适用。然而，人们很少同时在不同层次工作，实际上，每个人总是会分年段地在这些层次间工作。所以人们常常认为某一层次的高效方法应该应用到其他层次上，悲剧就这样产生了。准则就是：小型、紧凑的团队跟大型松散的组织动作方式不同，应相应地选择适合你的方法。
==========
- Your Highlight on Location 795-798 | Added on Tuesday, May 13, 2014 12:23:36 AM

一匹马走进酒吧，说道：“我能在两天内完成那个功能。”开发成本计算和时间表是个笑话。相信它的人，要么是傻瓜，要么是初出茅庐的项目经理。这不是模糊科学，这是瞎编。不错，的确有人相信编码工作可以被精炼成一个可预见进度和质量的可重复的过程，那我儿子至今还相信牙仙子呢！事实上，除非你只需编写10行那么长的代码，或者代码可以直接从以前的工作中复制过来，否则你不可能知道编码会花费多长时间。
==========
- Your Highlight on Location 802-805 | Added on Tuesday, May 13, 2014 12:24:23 AM

关于牙仙子（Tooth Fairy）。美国人有个信仰：小孩子换牙时，父母会告诉他把牙齿用信封装好，放在枕头下，早上起来的时候牙仙子会用钱跟他换牙齿。这钱当然是父母给的，用来鼓励小孩子拔牙。牙仙子在美国是人尽皆知的，虽然只是一个“善意的谎言”！②关于飞猪（Flying Pigs）。猪会飞吗？美国人常用此来比喻离奇荒诞之事。
==========
- Your Highlight on Location 807-812 | Added on Tuesday, May 13, 2014 3:31:52 AM

当然，你可以估算，但估算出来的时间是成对数关系的。有些事情需要花费几个月，有些事情需要几周，有些需要几天，有些需要几个小时，有些则只需几分钟。而我跟我的项目组项目经理（Group Program Manager, GPM）一起给一个项目做时间安排时，我们对每个功能使用“困难/中等/容易”3个等级来评估。“困难”意味着一个全职开发人员需要花费整个里程碑时间；“中等”意味着一个全职开发人员需要花费2～3周时间；“容易”意味着一个全职开发人员需要花费2～3天时间。没有其他等级了，也不做精确的时间表。为什么呢？因为我们俩知道，我们无法预测更精确的时间了。
==========
- Your Highlight on Location 814-818 | Added on Tuesday, May 13, 2014 3:32:56 AM

那些“必须有”的功能放在第一个里程碑期间内并且都是要完成的，如何完成则是根据开发人员的数量和“困难/中等/容易”等级；“最好有”的功能放在第二个里程碑期间内；“希望有”的功能放在第三个里程碑期间内；除此之外的所有功能统统不做。通常情况下，如果到了第三个里程碑期间的第二周，仍然有较多“最好有”、“希望有”的功能没有实现，这时候大家都很惶恐，你就要把所有“希望有”的功能扔掉，并且“最好有”的功能也只保留一半。
==========
- Your Highlight on Location 826-833 | Added on Tuesday, May 13, 2014 3:34:30 AM

这才是我要引出的主题。在开发成本计算和时间安排上不能只盯着日期或时间不放，应该关注风险管理。我们通过软件的功能和特性来取悦客户，不管这是个软件套包还是网络服务。这里的风险指的是，我们未能在合适的时间，将符合质量要求的功能集合交付到客户手中。 一个好的开发时间表通过优先处理关键功能来管理风险。这些关键功能是能让客户满意的最小功能集合。通过“困难/中等/容易”这种评级方法，可以判断出在这个最小集合中包含哪些功能是切实可行的。其他的功能按照优先顺序和一致性原则依次加入。 然后你开始编写代码，并且看着功能实现从困难转向容易，又从容易转向困难。通过集中所有必要的资源，以降低不能按时交付高质量的“必须有”的功能的风险，其他的都是次要的。你还可以将不紧要、但又不失挑战性的项目交给实习生去做。
==========
- Your Highlight on Location 836-841 | Added on Tuesday, May 13, 2014 3:36:36 AM

一定要破除“功能交付日期”的神话，因为开发人员专注于这种日期的时候会破坏风险管理。真正要关心的日期只能是“项目日期”，比如各个里程碑、测试版，等等，而绝不应该是“功能交付日期”。项目日期之间一般都有较长时间的间隔，而且这种日期不会很多。管理这几个日期要容易得多。如果要求开发人员在某个日期之前一定要实现某个功能，当他们不能按时完成时他们往往不会告诉你，而是对你说“我正在加紧做……我会加班……”之类的话。
==========
- Your Highlight on Location 845-847 | Added on Tuesday, May 13, 2014 3:37:17 AM

一个产品的成功与否，取决于你对关键功能的风险管理能力。当你给你的开发团队解释清楚这一点之后，情况就完全不一样了。当然，额外的功能可以锦上添花，但最关键的还是要专注于存在风险的地方，充分沟通，并一起努力把它们解决掉。
==========
- Your Highlight on Location 897-907 | Added on Tuesday, May 13, 2014 3:44:22 AM

首先我要重申：如果你坚持让开发人员遵从“功能交付日期”，那他们为了准时交付可能会撒谎。他们会隐瞒自己的工作状态，会在质量和完成度上给你虚假信息。如果你不想你的开发团队这么对你的话，你必须建立起一个更好的激励机制。我用过3种不同的方法，这些方法能使大家互相协调工作并产生良好效果。 第一种，也是最基本的方法，就是应用里氏震级估计。我的开发人员知道，我期望的是每个功能在大致那么多的时间内完成。如果一个原先估计需要2周的任务实际上花了2周半，可能关系不大。但如果花的时间比原先估计的要长得多，那么通常是有实实在在的原因的，那个开发人员必然会让我知道这个原因。如果缺乏充分的理由去延期交付，则足以对开发人员形成一种鞭策。然而，因为没有卡得很死的日期，大家几乎不会去想到隐瞒和欺骗。 第二种激励工具是瞄准里程碑日期。这有招致大家走捷径的危险，但总体的效果是鼓励开发人员从一开始就努力工作，并且让他们对自己是否落后于进度做到心里有数。“功能交付日期”和里程碑日期关键的不同在于，后者是给整个团队设置的日期，需要整个团队一起努力去达到它。因此，个人抄近路的压力就会小很多。然而，这种危险性仍然无法杜绝，逼得我使出最后也是最有效的一招。
==========
- Your Highlight on Location 909-913 | Added on Tuesday, May 13, 2014 3:45:19 AM

最后一种激励工具是迄今为止我使用起来最有效的。我向团队解释清楚哪些功能是必须要有的，必须优先完成。我告诉他们，必要时任何其他的功能都可能被放弃不做。遗憾的是，这些必须要有的功能常常做起来比较乏味，没有意思，甚至不值得一提。因此我告诉我的团队，如果他们想要做那些很酷的功能，必须首先保质保量地完成之前的这些关键功能。之后，再去做那些不那么关键却要炫得多的东西。这种激励是积极的，有建设性的，并且非常有效。屡试不爽！
==========
